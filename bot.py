import logging
import os

from aiogram import Bot, Dispatcher, executor, types

from keyboards import main_menu_keyboard
from main import get_income, update_or_create_income
from middlewares import AccessMiddleware

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
ACCESS_ID = os.getenv("TELEGRAM_ACCESS_ID")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(AccessMiddleware(int(ACCESS_ID)))


@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    """Send a welcome message"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã\n–°–æ–±–∏—Ä–∞–µ—à—å—Å—è –æ–ø—è—Ç—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞—à–∏ –¥–µ–Ω–µ–∂–∫–∏? üòÑ",
        reply_markup=main_menu_keyboard,
    )


@dp.message_handler(lambda message: message.text.startswith("–î–æ—Ö–æ–¥"))
async def add_income(message: types.Message):
    """Create or update income"""
    user_message = message.text.replace("–î–æ—Ö–æ–¥", "").replace(" ", "")
    update_or_create_income(float(user_message))
    await message.answer("–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω ‚úÖ")


@dp.message_handler()
async def main_menu(message: types.Message):
    if message.text == "üíµ –î–æ—Ö–æ–¥—ã":
        income = get_income()
        if not income:
            await message.answer(
                "–í —Ç–≤–æ–∏—Ö –∫–∞—Ä–º–∞–Ω–∞—Ö —Å–æ–≤—Å–µ–º –Ω–µ—Ç —ç–¥–¥–∏ üò¢"
                + "\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–î–æ—Ö–æ–¥ 125.30"
            )
        else:
            await message.answer(
                "–ë—É–¥—å —Å–ø–æ–∫–æ–µ–Ω, —Ç—ã –µ—â–µ –Ω–µ –±–∞–Ω–∫—Ä–æ—Ç üòÑü•≥"
                + "\n\n–û—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:\n"
                + str(income.amount)
                + " BYN"
                + "\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–î–æ—Ö–æ–¥ 125.30"
            )


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
